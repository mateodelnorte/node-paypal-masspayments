/*

 Tests for node-paypal-masspay
 Created By: Matt Walters
 Date: 3/2/2012
 Updated By: Maria Mora
 Updated On: 9/25/2014

 Note: tests require the following to be set in test-values.js:

  pwd - PayPal API password (generated by PayPal)
  user - PayPal API user
  signature - PayPal API signature
  emailSubject - optional email subject to appear on your outgoing mails
  receiverUserId - a test UserID aka PayerID for a regular account obtainable via PayPal Account Authentication Service

*/

var vows = require('vows'),
    assert = require('assert'),
    _ = require('underscore'),
    testValues = require('./test-values');

var MassPay = require('../index');

var emailPaymentRequests = [
  {
    receiver: 'matt@gochime.com'
    , amount: '1.5'
    , note: 'request for matt@gc'
  }
, {
    receiver: 'tim@gochime.com'
    , amount: '1.75'
    , uniqueId: '123456'
    , note: 'request for tim@gc'
  }
, {
    receiver: 'may@gochime.com'
    , amount: '2.75'
    , note: 'request for may@gc'
  }
];

var userIdPaymentRequests = [
  {
    receiver: testValues.receiverUserId
    , amount: '1.5'
  }
];

var badEmailPaymentRequests = [
  {
    receiver: 'badEmailAddress'
    , amount: '1.5'
    , uniqueId: '12345'
    , note: 'request for matt@gc'
  }
, {
    receiver: 'tim@gochime.com'
    , amount: '1.75'
    , uniqueId: '123456'
    , note: 'request for tim@gc'
  }
];

var badUserIdPaymentRequests = [
  {
    receiver: 'badUserId'
    , amount: '1.5'
    , uniqueId: '12345'
    , note: 'request for bad User ID'
  }
];

vows
  .describe('MassPay')
    .addBatch({
        'The MassPay API for EmailAddress receiverType': {
        topic: new MassPay({
            pwd: testValues.pwd
            , user: testValues.user
            , signature: testValues.signature
            , emailsubject: testValues.emailSubject
            , receiverType: 'EmailAddress'
        }),
        'Pay method calls PayPal remote gateway / API with proper input': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(emailPaymentRequests, 'EmailAddress');
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Success'": function (err, result) {
              assert.isNull(err);
              assert.notEqual('Failure', result.ACK);
              assert.equal('Success', result.ACK);
              assert.isNotNull(result.CORRELATIONID);
            }
        },
        'Pay method calls PayPal remote gateway / API with incorrect input': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(badEmailPaymentRequests, 'EmailAddress');
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Failure'": function (err, result) {
              assert.isTrue(result === undefined);
              assert.equal('Failure', err.ACK);
              assert.notEqual('Success', err.ACK);
            }
        }
      }
    })
    .addBatch({
        'The MassPay API for UserID receiverType': {
        topic: new MassPay({
            pwd: testValues.pwd
            , user: testValues.user
            , signature: testValues.signature
            , receiverType: 'UserID'
        }),
        'Pay method calls PayPal remote gateway / API with proper input and UserID receiverType': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(userIdPaymentRequests, 'UserID');
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Success'": function (err, result) {
              assert.isNull(err);
              assert.notEqual('Failure', result.ACK);
              assert.equal('Success', result.ACK);
              assert.isNotNull(result.CORRELATIONID);
            }
        },
        'Pay method calls PayPal remote gateway / API with incorrect input and UserID receiverType': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(badUserIdPaymentRequests, 'UserID');
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Failure'": function (err, result) {
              assert.isTrue(result === undefined);
              assert.equal('Failure', err.ACK);
              assert.notEqual('Success', err.ACK);
            }
        }
      }
    })
    .export(module); // Export the Suite