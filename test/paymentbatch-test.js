/*

 Tests for node-paypal-masspay
 Created By: Matt Walters
 Date: 3/2/2012
 Updated By: Maria Mora
 Updated On: 9/25/2014

 Note: tests require the following to be set in test-values.js:
 
  pwd - PayPal API password (generated by PayPal)
  user - PayPal API user
  signature - PayPal API signature
  emailSubject - optional email subject to appear on your outgoing mails
  receiverUserId - a test UserID aka PayerID for a regular account obtainable via PayPal Account Authentication Service

*/

var vows = require('vows'),
    assert = require('assert'),
    _ = require('underscore');

var MassPay = require('../index');

var emailPaymentRequests = [
  {
    receiver: 'matt@gochime.com'
    , amount: 127.5
    , uniqueId: '12345'
    , note: 'request for matt@gc'
  }
, {
    receiver: 'tim@gochime.com'
    , amount: 517.0
    , uniqueId: '123456'
    , note: 'request for tim@gc'
  }
];

var userIdPaymentRequests = [
  {
    receiver: 'ZKOLSW4XVB69Y'
    , amount: '1.75'
    , uniqueId: '1234567'
    , note: 'request for User ID'
  }
, {
    receiver: 'OPLWSU3OKB82D'
    , amount: '2.5'
    , uniqueId: '12345678'
    , note: 'request for User ID'
  }
];

vows
  .describe('PaymentBatch')
    .addBatch({
        'A MassPay PaymentBatch with EmailAddress receiverType': {
        topic: new MassPay.PaymentBatch(emailPaymentRequests, 'EmailAddress'),
        'When instantiated wih an array of payment requests': {
            topic: function (pb) {
              return pb;
            },
            'prepares a list of params for the PM API': function (pb) {
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_EMAIL0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_AMT0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_UNIQUEID0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_NOTE0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_EMAIL1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_AMT1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_UNIQUEID1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_NOTE1'; 
              }));
            }
        }
      }
    })
    .addBatch({
        'A MassPay PaymentBatch with UserID receiverType': {
        topic: new MassPay.PaymentBatch(userIdPaymentRequests, 'UserID'),
        'When instantiated wih an array of payment requests': {
            topic: function (pb) {
              return pb;
            },
            'prepares a list of params for the PM API': function (pb) {
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_RECEIVERID0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_AMT0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_UNIQUEID0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_NOTE0'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_RECEIVERID1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_AMT1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_UNIQUEID1'; 
              }));
              assert.isTrue(_.any(_.keys(pb.params), function(item) { 
                return item === 'L_NOTE1'; 
              }));
            }
        }
      }
    })
    .export(module); // Export the Suite